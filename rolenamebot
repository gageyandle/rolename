import discord
from discord.ext import commands
import asyncio
import json
import os
import yt_dlp   # for audio extraction
import time
from discord import app_commands

# Bot config
intents = discord.Intents.default()
intents.message_content = True
intents.members = True  

bot = commands.Bot(command_prefix='!', intents=intents)

CONFIG_FILE = 'bot_config.json'

default_config = {
    "auto_roles": [],  
    "welcome_channel": None,  
    "auto_nickname": {
        "enabled": False,
        "format": "New Member {count}", 
        "counter": 1
    }
}

def load_config():
    if os.path.exists(CONFIG_FILE):
        try:
            with open(CONFIG_FILE, 'r') as f:
                return json.load(f)
        except:
            return default_config.copy()
    else:
        return default_config.copy()

def save_config(config):
    with open(CONFIG_FILE, 'w') as f:
        json.dump(config, f, indent=2)

@bot.event
async def on_member_join(member):
    config = load_config()
    try:
        if config["auto_roles"]:
            roles_to_add = []
            for role_id in config["auto_roles"]:
                role = member.guild.get_role(role_id)
                if role:
                    roles_to_add.append(role)
                else:
                    print(f"Warning: Role with ID {role_id} not found")
            
            if roles_to_add:
                await member.add_roles(*roles_to_add, reason="Auto-role on join")
                print(f"Added {len(roles_to_add)} roles to {member.display_name}")

        if config["auto_nickname"]["enabled"]:
            try:
                nickname = config["auto_nickname"]["format"].format(
                    count=config["auto_nickname"]["counter"],
                    username=member.name,
                    discriminator=member.discriminator
                )
                await member.edit(nick=nickname, reason="Auto-nickname on join")
                
                config["auto_nickname"]["counter"] += 1
                save_config(config)
                
                print(f"Renamed {member.name} to {nickname}")
            except discord.Forbidden:
                print(f"No permission to rename {member.name}")
            except Exception as e:
                print(f"Error renaming {member.name}: {e}")

        if config["welcome_channel"]:
            channel = bot.get_channel(config["welcome_channel"])
            if channel:
                embed = discord.Embed(
                    title="Welcome!",
                    description=f"Welcome to the server, {member.mention}!",
                    color=discord.Color.green()
                )
                embed.set_thumbnail(url=member.display_avatar.url)
                await channel.send(embed=embed)

    except Exception as e:
        print(f"Error in on_member_join: {e}")

# --- MUSIC SYSTEM ---
def get_audio_source(url):
    ydl_opts = {
        "format": "bestaudio/best",
        "quiet": True,
        "default_search": "auto"
    }
    with yt_dlp.YoutubeDL(ydl_opts) as ydl:
        info = ydl.extract_info(url, download=False)
        return info["url"], info.get("title", "Unknown Title")

@bot.command()
async def play(ctx, url: str):
    if ctx.author.voice is None:
        await ctx.send("You must be in a voice channel first!")
        return

    channel = ctx.author.voice.channel

    if ctx.voice_client is None:
        await channel.connect()
    else:
        await ctx.voice_client.move_to(channel)

    stream_url, title = get_audio_source(url)

    vc = ctx.voice_client
    if vc.is_playing():
        vc.stop()

    ffmpeg_opts = {"options": "-vn"}
    vc.play(discord.FFmpegPCMAudio(stream_url, **ffmpeg_opts))

    await ctx.send(f"Now playing: **{title}**")

@bot.command()
async def stop(ctx):
    if ctx.voice_client:
        await ctx.voice_client.disconnect()
        await ctx.send("Stopped and disconnected.")

# --- AUTO-ROLE, NICKNAME, WELCOME COMMANDS ---
@bot.command(name='setup_autorole')
@commands.has_permissions(administrator=True)
async def setup_autorole(ctx, *role_names):
    config = load_config()
    role_ids = []
    
    for role_input in role_names:
        role = None
        if role_input.startswith('<@&') and role_input.endswith('>'):
            role_id = int(role_input[3:-1])
            role = ctx.guild.get_role(role_id)
        elif role_input.isdigit():
            role = ctx.guild.get_role(int(role_input))
        else:
            role = discord.utils.get(ctx.guild.roles, name=role_input)
        
        if role:
            role_ids.append(role.id)
        else:
            await ctx.send(f"Could not find role: {role_input}")
            return
    
    config["auto_roles"] = role_ids
    save_config(config)
    
    role_list = [ctx.guild.get_role(rid).name for rid in role_ids]
    await ctx.send(f"Auto-roles set to: {', '.join(role_list)}")

@bot.command(name='setup_nickname')
@commands.has_permissions(administrator=True)
async def setup_nickname(ctx, enabled: bool = True, *, format_string = "New Member {count}"):
    config = load_config()
    config["auto_nickname"]["enabled"] = enabled
    config["auto_nickname"]["format"] = format_string
    save_config(config)
    
    if enabled:
        await ctx.send(f"Auto-nickname enabled with format: `{format_string}`")
    else:
        await ctx.send("Auto-nickname disabled")

@bot.command(name='setup_welcome')
@commands.has_permissions(administrator=True)
async def setup_welcome(ctx, channel: discord.TextChannel = None):
    config = load_config()
    if channel is None:
        channel = ctx.channel
    config["welcome_channel"] = channel.id
    save_config(config)
    await ctx.send(f"Welcome channel set to {channel.mention}")

@bot.command(name='remove_autorole')
@commands.has_permissions(administrator=True)
async def remove_autorole(ctx, role_name):
    config = load_config()
    role = None
    if role_name.startswith('<@&') and role_name.endswith('>'):
        role_id = int(role_name[3:-1])
        role = ctx.guild.get_role(role_id)
    elif role_name.isdigit():
        role = ctx.guild.get_role(int(role_name))
    else:
        role = discord.utils.get(ctx.guild.roles, name=role_name)
    
    if role and role.id in config["auto_roles"]:
        config["auto_roles"].remove(role.id)
        save_config(config)
        await ctx.send(f"Removed {role.name} from auto-roles")
    else:
        await ctx.send(f"Role not found in auto-roles: {role_name}")

@bot.command(name='view_config')
@commands.has_permissions(administrator=True)
async def view_config(ctx):
    config = load_config()
    embed = discord.Embed(title="Bot Configuration", color=discord.Color.blue())
    
    if config["auto_roles"]:
        role_names = []
        for role_id in config["auto_roles"]:
            role = ctx.guild.get_role(role_id)
            role_names.append(role.name if role else f"Unknown ({role_id})")
        embed.add_field(name="Auto-Roles", value="\n".join(role_names), inline=False)
    else:
        embed.add_field(name="Auto-Roles", value="None", inline=False)
    
    if config["welcome_channel"]:
        channel = bot.get_channel(config["welcome_channel"])
        channel_name = channel.mention if channel else f"Unknown ({config['welcome_channel']})"
        embed.add_field(name="Welcome Channel", value=channel_name, inline=False)
    else:
        embed.add_field(name="Welcome Channel", value="None", inline=False)
    
    nickname_status = "Enabled" if config["auto_nickname"]["enabled"] else "Disabled"
    nickname_format = config["auto_nickname"]["format"]
    nickname_counter = config["auto_nickname"]["counter"]
    embed.add_field(
        name="Auto-Nickname", 
        value=f"Status: {nickname_status}\nFormat: `{nickname_format}`\nNext Counter: {nickname_counter}", 
        inline=False
    )
    
    await ctx.send(embed=embed)

@bot.command(name='test_join')
@commands.has_permissions(administrator=True)
async def test_join(ctx, member: discord.Member = None):
    if member is None:
        member = ctx.author
    await on_member_join(member)
    await ctx.send(f"Tested join event for {member.mention}")

@bot.command(name='rename_all')
@commands.has_permissions(administrator=True)
async def rename_all(ctx):
    config = load_config()
    if not config["auto_nickname"]["enabled"]:
        await ctx.send("Auto-nickname is disabled. Enable it first with `!setup_nickname`.")
        return
    
    count = config["auto_nickname"]["counter"]
    renamed = 0
    
    for member in ctx.guild.members:
        if member.bot:
            continue
        try:
            nickname = config["auto_nickname"]["format"].format(
                count=count,
                username=member.name,
                discriminator=member.discriminator
            )
            await member.edit(nick=nickname, reason="Bulk auto-nickname")
            print(f"Renamed {member.name} to {nickname}")
            count += 1
            renamed += 1
        except discord.Forbidden:
            print(f"No permission to rename {member.name}")
        except Exception as e:
            print(f"Error renaming {member.name}: {e}")
    
    config["auto_nickname"]["counter"] = count
    save_config(config)
    await ctx.send(f"Renamed {renamed} members in this server.")

# --- SLASH COMMAND ---
@bot.tree.command(name="ping", description="Check bot latency")
async def ping(interaction: discord.Interaction):
    start = time.perf_counter()
    await interaction.response.send_message("Working...")
    end = time.perf_counter()
    latency_ms = round((end - start) * 1000)
    await interaction.edit_original_response(content=f"Working! ðŸŸ¢ Ping: {latency_ms}ms")

GUILD_ID = 1409377304458559662
@bot.event
async def on_ready():
    print(f'{bot.user} has connected to Discord!')
    guild = discord.Object(id=1409377304458559662)  # replace with your server ID
    await bot.tree.sync(guild=guild)
    print(f"Slash commands synced for guild {GUILD_ID}")
# --- ERROR HANDLING ---
@bot.event
async def on_command_error(ctx, error):
    if isinstance(error, commands.MissingPermissions):
        await ctx.send("You don't have permission to use this command.")
    elif isinstance(error, commands.CommandNotFound):
        return
    else:
        print(f"Command error: {error}")
        await ctx.send("An error occurred while executing the command.")

# --- RUN BOT ---
if __name__ == "__main__":
    TOKEN = ("NOTMYTOKEN") 
    if not TOKEN:
        print("missing token goober.")
    else:
        bot.run(TOKEN)
